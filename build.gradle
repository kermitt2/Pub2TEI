buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath 'gradle.plugin.org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.12.0'
        classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url new File(rootProject.rootDir, "localLibs")
    }
    flatDir {
        dirs 'localLibs'
    }
    maven { url "https://grobid.s3.eu-west-1.amazonaws.com/repo/" }
}

apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'base'
apply plugin: 'com.github.kt3k.coveralls'

group 'org.pub2tei'
version '0.2'

description = """transform the myriad of scientific publisher XML into the same TEI XML format, common to GROBID"""

sourceCompatibility = 1.11
targetCompatibility = 1.11

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.run.workingDir = rootProject.rootDir

sourceSets.main.resources {
    srcDirs = ["src/main/resources"];
}

processResources {
    filesMatching('./config/pub2tei.yml') {
        filter {
            it.replace('project.version', project.property('version_placeholder'))
        }
    }
}

configurations {
    all*.exclude group: 'org.slf4j', module: "slf4j-log4j12"
    all*.exclude group: 'org.slf4j', module: "slf4j-jdk14"
    all*.exclude group: 'log4j', module: "log4j"
    implementation.setCanBeResolved(true)
}

task install(dependsOn: installShadowDist)

ext {
    localLibs = ['saxon9he.jar']
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation "org.hamcrest:hamcrest-all:1.3"
    testImplementation "org.easymock:easymock:3.5"
    testImplementation "org.xmlunit:xmlunit-matchers:2.10.0"
    testImplementation "org.xmlunit:xmlunit-legacy:2.10.0"

    // packaging local libs
    implementation fileTree(dir: new File(rootProject.rootDir, 'localLibs'), include: localLibs) 

    implementation(group: 'xml-apis', name: 'xml-apis') {
        // otherwise xml-apis 2.0.1 will come from XOM and will result in
        // java.lang.ClassNotFoundException: org.w3c.dom.ElementTraversal
        //TODO: sort out this problem better
        version {
            strictly '1.4.01'
        }
    }

    //implementation "com.google.code.gson:gson:2.8.1"

    // GROBID
    implementation group: 'org.grobid', name: 'grobid-core', version: '0.8.1'
    implementation "black.ninia:jep:4.0.2"

    implementation 'ru.vyarus:dropwizard-guicey:7.0.0'
    implementation 'io.dropwizard:dropwizard-bom:4.0.0'
    implementation 'io.dropwizard:dropwizard-core:4.0.0'
    implementation 'io.dropwizard:dropwizard-assets:4.0.0'
    implementation 'io.dropwizard:dropwizard-testing:4.0.0'
    implementation 'io.dropwizard:dropwizard-forms:4.0.0'
    implementation 'io.dropwizard:dropwizard-client:4.0.0'
    implementation 'io.dropwizard:dropwizard-auth:4.0.0'
    implementation 'io.dropwizard.metrics:metrics-core:4.2.22'
    implementation 'io.dropwizard.metrics:metrics-servlets:4.2.22'

    implementation "xerces:xercesImpl:2.12.0"
    implementation "net.arnx:jsonic:1.3.10"
    implementation "net.sf.saxon:Saxon-HE:9.6.0-9"
    implementation "xom:xom:1.3.2"
    implementation 'javax.xml.bind:jaxb-api:2.3.0'
    implementation 'org.apache.opennlp:opennlp-tools:1.9.1'
    implementation 'black.ninia:jep:4.0.2'
    implementation "org.apache.httpcomponents:httpclient:4.5.3"
    implementation "org.apache.lucene:lucene-analyzers-common:4.5.1"
    implementation group: 'org.jruby', name: 'jruby-complete', version: '9.2.13.0'

    testImplementation "org.xmlunit:xmlunit-matchers:2.10.0"
    testImplementation "org.xmlunit:xmlunit-legacy:2.10.0"

    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation "com.rockymadden.stringmetric:stringmetric-core_2.10:0.27.3"

    //Parsing XML/JSON
    //implementation group: 'org.codehaus.woodstox', name: 'stax2-api', version: '4.0.0'
    //implementation group: 'org.codehaus.woodstox', name: 'woodstox-core-asl', version: '4.4.1'
    implementation "com.fasterxml.jackson.core:jackson-core:2.14.3"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.14.3"
//    implementation "com.fasterxml.jackson.module:jackson-module-afterburner:2.14.3"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.14.3"

//    compile group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.3'
    implementation 'org.apache.commons:commons-collections4:4.1'
    implementation 'commons-beanutils:commons-beanutils:1.9.4'
    implementation 'commons-io:commons-io:2.6'
    implementation group: 'org.apache.commons', name: 'commons-compress', version: '1.20'
}



task mainJar(type: ShadowJar) {
    zip64 true
    from sourceSets.main.output

    from {
        project.configurations.runtimeClasspath.collect {
            it.isDirectory() ? [] : localLibs.contains(it.getName()) ? zipTree(it) : []
        }
    }
}

distributions {
    shadow {
        /*contents {
            from(new File(rootProject.rootDir, "data/config")) {
                into "data/config"
            }
        }*/
    }
}

shadowJar {
    archiveClassifier = 'onejar'
    mergeServiceFiles()
    zip64 true
    manifest {
        attributes 'Main-Class': 'org.pub2tei.main.Main'
    }
    //from sourceSets.main.output

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {
        project.configurations.runtimeClasspath.collect {
            it.isDirectory() ? [] : localLibs.contains(it.getName()) ? zipTree(it) : []
        }
    }

    configurations = [project.configurations.runtimeClasspath]
}

jar {
    dependsOn mainJar
    enabled true
}

artifacts {
    archives jar
    archives shadowJar
}

//////////
// service
apply plugin: 'application'
application {
    mainClassName = 'org.pub2tei.service.ServiceApplication'

    run {
        def libraries = ""
        if (Os.isFamily(Os.FAMILY_MAC)) {
            if (Os.OS_ARCH.equals("aarch64")) {
                libraries = "${file("../grobid/grobid-home/lib/mac_arm-64").absolutePath}"
            } else {
                libraries = "${file("../grobid/grobid-home/lib/mac-64").absolutePath}"
            }
        } else if (Os.isFamily(Os.FAMILY_UNIX)) {
            libraries = "${file("../grobid/grobid-home/lib/lin-64/jep").absolutePath}:" +
                "${file("../grobid-home/lib/lin-64").absolutePath}:"
        } else  {
            throw new RuntimeException("Unsupported platform!")
        }

        if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8) > 0) {
            jvmArgs "--add-opens", "java.base/java.lang=ALL-UNNAMED"
        }
        workingDir = rootProject.rootDir
        //def javaLibraryPath = "${System.getProperty('java.library.path')}:" + libraries
        //systemProperty "java.library.path", javaLibraryPath

        def javaLibraryPath = "${System.getProperty('java.library.path')}:" + libraries
        systemProperty "java.library.path", javaLibraryPath

        args = ['server', 'resources/config/config.yml']
    }
}

